##########################
Author :- Pratik Vishwakarma
Date :- 02/06/2021
Topic :- Assignment5
Language used :- Java
######################### 

1) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.

class Top1
{
	void disp1()
	{
		System.out.println("Top1 Display");
	}
}
class Base1 extends Top1
{
	void disp1()
	{
		System.out.println("Base1 Display");
	}
	
}
class Base2 extends Top1
{
	void disp1()
	{
		System.out.println("Base2 Display");
	}
	
}
class Base3 extends Top1
{
	void disp1()
	{
		System.out.println("Base3 Display");
	}
	
}
public class Todo {

	static void call(Top1 ref)
	{
		ref.disp1();// dynamic polymorphism
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		call(new Base1());
		call(new Base2());
		call(new Base3());
		
	}

}


2) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.


 abstract class Shape {

	abstract void draw();
}
class Circle extends Shape
{
	void draw(){
		System.out.println("Circle draw");
	}
}
class Rectangle extends Shape
{
	void draw(){
		System.out.println("Rectangle draw");
	}
}
class Polygon extends  Shape
{
	void draw(){
		System.out.println("Polygon draw");
	}
}

abstract class ShapeDemo2 {

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Shape arr[]= {new Circle(),new Rectangle(),new Polygon()};
		
		for(int i=0;i<arr.length;i++)
		{
			arr[i].draw();
		}
		
	}

}

3) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.

interface A
{
	default String disp() {
		System.out.println("A Interface");
		return "in disp() of A";
	}
}
interface B extends A
{
	default String disp2() {
		System.out.println(A.super.disp());
		System.out.println("B interface");
		return "in disp() of B";
	}
}
class C implements B
{
	public String disp()
	{
		System.out.println(B.super.disp2());
		return "in overriden method of A";
	}
	public String disp2()
	{
		System.out.println(B.super.disp());
		return "in overriden method of B";
	}
}
public class Interface1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		C c=new C();
		System.out.println(c.disp());
		System.out.println(c.disp2());
		
	}

}


4) Define class "Parent1" with some data.
Define interface "Parent2" with some data.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.

class Parent1
{
	public void disp1()
	{
		System.out.println("Parent1 Class");
	}
}
interface Parent2
{
	default String disp2()
	{
		//System.out.println("Parent2");
		return "Parent2 Interface";
	}
}
class child extends Parent1 implements Parent2
{
	public void disp1()
	{
		super.disp1();
	//	System.out.println("in class child");
	}
	public String disp2()
	{
		System.out.println(Parent2.super.disp2());
		return "Overriden method in child class";
	}
}

public class ParentMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		child chd=new child();
		chd.disp1();
		chd.disp2();
	}

}


5) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.

class Base
{
	Base()
	{
		System.out.println("Base Constructor");
	}
}
class Sub extends Base
{
	int i=6;
	int j=7;
	Sub()
	{
		System.out.println("Sub Constructor");
	}
	public Sub(int i) {
		super();
		this.i = i;
		System.out.println(i);
	}
	public Sub(int i, int j) {
		super();
		this.i = i;
		this.j = j;
		System.out.println(i);
		System.out.println(j);
	}
	
}
public class Constructor1 {

	public static void main(String[] args) {
	 Sub s1= new Sub();		
	 Sub s2=new Sub(2);
	 Sub s3=new Sub(4,7);
	 
	}

}


6) create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.


interface Game
{
	void play();
}
class Cricket implements Game
{

	@Override
	public void play() {
		
		System.out.println("Play Cricket");
	}
	
}
class Football implements Game
{

	@Override
	public void play() {
		
		System.out.println("Play Football");
	}
	
}
class Tennis implements Game
{

	@Override
	public void play() {
		
		System.out.println("Play Tennis");
	}
	
}
public class ClassDemo {
		
	static void perform(Game ref)
	{
		ref.play();
	}
	public static void main(String[] args) {
		
		perform(new Cricket());
		perform(new Football());
		perform(new Tennis());
		
	}

}







